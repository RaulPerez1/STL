<?xml version="1.0"?>
<doc>
  <members>
    <member name="T:std._List_unchecked_const_iterator`2">
      <summary></summary>
      <typeparam name="_Mylist"></typeparam>
      <typeparam name="_Base"></typeparam>
    </member>
    <member name="std._List_unchecked_const_iterator`2.iterator_category">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_const_iterator`2._Nodeptr">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_const_iterator`2.value_type">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_const_iterator`2.difference_type">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_const_iterator`2.pointer">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_const_iterator`2.reference">
      <summary></summary>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.#ctor">
      <summary></summary>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.#ctor(std._List_unchecked_const_iterator{_Mylist,_Base}._Nodeptr,const _Mylist)">
      <summary></summary>
      <param name="_Pnode"></param>
      <param name="_Plist"></param>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.operator* const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.operator-&gt; const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.operator++">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.operator++(int)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.operator--">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.operator--(int)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.operator==(const std._List_unchecked_const_iterator{_Mylist,_Base}) const">
      <summary></summary>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_const_iterator`2.operator!=(const std._List_unchecked_const_iterator{_Mylist,_Base}) const">
      <summary></summary>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="T:std._List_unchecked_iterator`1">
      <summary></summary>
      <typeparam name="_Mylist"></typeparam>
    </member>
    <member name="std._List_unchecked_iterator`1._Mybase">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_iterator`1.iterator_category">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_iterator`1._Nodeptr">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_iterator`1.value_type">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_iterator`1.difference_type">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_iterator`1.pointer">
      <summary></summary>
    </member>
    <member name="std._List_unchecked_iterator`1.reference">
      <summary></summary>
    </member>
    <member name="M:std._List_unchecked_iterator`1.operator* const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_iterator`1.operator-&gt; const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_iterator`1.operator++">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_iterator`1.operator++(int)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_iterator`1.operator--">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_unchecked_iterator`1.operator--(int)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="T:std._List_const_iterator`1">
      <summary></summary>
      <typeparam name="_Mylist"></typeparam>
    </member>
    <member name="std._List_const_iterator`1._Mybase">
      <summary></summary>
    </member>
    <member name="std._List_const_iterator`1.iterator_category">
      <summary></summary>
    </member>
    <member name="std._List_const_iterator`1._Nodeptr">
      <summary></summary>
    </member>
    <member name="std._List_const_iterator`1.value_type">
      <summary></summary>
    </member>
    <member name="std._List_const_iterator`1.difference_type">
      <summary></summary>
    </member>
    <member name="std._List_const_iterator`1.pointer">
      <summary></summary>
    </member>
    <member name="std._List_const_iterator`1.reference">
      <summary></summary>
    </member>
    <member name="M:std._List_const_iterator`1.operator* const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_const_iterator`1.operator-&gt; const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_const_iterator`1.operator++">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_const_iterator`1.operator++(int)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_const_iterator`1.operator--">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_const_iterator`1.operator--(int)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_const_iterator`1.operator==(const std._List_const_iterator{_Mylist}) const">
      <summary></summary>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_const_iterator`1.operator!=(const std._List_const_iterator{_Mylist}) const">
      <summary></summary>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="std._List_const_iterator`1._Prevent_inheriting_unwrap">
      <summary></summary>
    </member>
    <member name="M:std._List_const_iterator`1._Unwrapped const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_const_iterator`1._Seek_to(std._List_unchecked_const_iterator{_Mylist,std._Iterator_base0})">
      <summary></summary>
      <param name="_It"></param>
    </member>
    <member name="T:std._List_iterator`1">
      <summary></summary>
      <typeparam name="_Mylist"></typeparam>
    </member>
    <member name="std._List_iterator`1._Mybase">
      <summary></summary>
    </member>
    <member name="std._List_iterator`1.iterator_category">
      <summary></summary>
    </member>
    <member name="std._List_iterator`1._Nodeptr">
      <summary></summary>
    </member>
    <member name="std._List_iterator`1.value_type">
      <summary></summary>
    </member>
    <member name="std._List_iterator`1.difference_type">
      <summary></summary>
    </member>
    <member name="std._List_iterator`1.pointer">
      <summary></summary>
    </member>
    <member name="std._List_iterator`1.reference">
      <summary></summary>
    </member>
    <member name="M:std._List_iterator`1.operator* const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_iterator`1.operator-&gt; const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_iterator`1.operator++">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_iterator`1.operator++(int)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_iterator`1.operator--">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std._List_iterator`1.operator--(int)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="std._List_iterator`1._Prevent_inheriting_unwrap">
      <summary></summary>
    </member>
    <member name="M:std._List_iterator`1._Unwrapped const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:std._List_iter_types`8">
      <summary></summary>
      <typeparam name="_Value_type"></typeparam>
      <typeparam name="_Size_type"></typeparam>
      <typeparam name="_Difference_type"></typeparam>
      <typeparam name="_Pointer"></typeparam>
      <typeparam name="_Const_pointer"></typeparam>
      <typeparam name="_Reference"></typeparam>
      <typeparam name="_Const_reference"></typeparam>
      <typeparam name="_Nodeptr_type"></typeparam>
    </member>
    <member name="std._List_iter_types`8.value_type">
      <summary></summary>
    </member>
    <member name="std._List_iter_types`8.size_type">
      <summary></summary>
    </member>
    <member name="std._List_iter_types`8.difference_type">
      <summary></summary>
    </member>
    <member name="std._List_iter_types`8.pointer">
      <summary></summary>
    </member>
    <member name="std._List_iter_types`8.const_pointer">
      <summary></summary>
    </member>
    <member name="std._List_iter_types`8._Nodeptr">
      <summary></summary>
    </member>
    <member name="T:std._List_node`2">
      <summary></summary>
      <typeparam name="_Value_type"></typeparam>
      <typeparam name="_Voidptr"></typeparam>
    </member>
    <member name="std._List_node`2.value_type">
      <summary></summary>
    </member>
    <member name="std._List_node`2._Nodeptr">
      <summary></summary>
    </member>
    <member name="M:std._List_node`2.#ctor(const std._List_node{_Value_type,_Voidptr})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
    </member>
    <member name="M:std._List_node`2.operator=(const std._List_node{_Value_type,_Voidptr})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_node`2._Buyheadnode``1(_Alnode)">
      <summary></summary>
      <typeparam name="_Alnode"></typeparam>
      <param name="_Al"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_node`2._Freenode0``1(_Alnode,std._List_node{_Value_type,_Voidptr}._Nodeptr)">
      <summary></summary>
      <typeparam name="_Alnode"></typeparam>
      <param name="_Al"></param>
      <param name="_Ptr"></param>
    </member>
    <member name="M:std._List_node`2._Freenode``1(_Alnode,std._List_node{_Value_type,_Voidptr}._Nodeptr)">
      <summary></summary>
      <typeparam name="_Alnode"></typeparam>
      <param name="_Al"></param>
      <param name="_Ptr"></param>
    </member>
    <member name="M:std._List_node`2._Free_non_head``1(_Alnode,std._List_node{_Value_type,_Voidptr}._Nodeptr)">
      <summary></summary>
      <typeparam name="_Alnode"></typeparam>
      <param name="_Al"></param>
      <param name="_Head"></param>
    </member>
    <member name="T:std._List_simple_types`1">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
    </member>
    <member name="std._List_simple_types`1._Node">
      <summary></summary>
    </member>
    <member name="std._List_simple_types`1._Nodeptr">
      <summary></summary>
    </member>
    <member name="T:std._List_val`1">
      <summary></summary>
      <typeparam name="_Val_types"></typeparam>
    </member>
    <member name="std._List_val`1._Nodeptr">
      <summary></summary>
    </member>
    <member name="std._List_val`1.value_type">
      <summary></summary>
    </member>
    <member name="std._List_val`1.size_type">
      <summary></summary>
    </member>
    <member name="std._List_val`1.difference_type">
      <summary></summary>
    </member>
    <member name="std._List_val`1.pointer">
      <summary></summary>
    </member>
    <member name="std._List_val`1.const_pointer">
      <summary></summary>
    </member>
    <member name="std._List_val`1.reference">
      <summary></summary>
    </member>
    <member name="std._List_val`1.const_reference">
      <summary></summary>
    </member>
    <member name="M:std._List_val`1.#ctor">
      <summary></summary>
    </member>
    <member name="M:std._List_val`1._Orphan_ptr2(std._List_val{_Val_types}._Nodeptr)">
      <summary></summary>
      <param name="_Ptr"></param>
    </member>
    <member name="M:std._List_val`1._Orphan_non_end">
      <summary></summary>
    </member>
    <member name="M:std._List_val`1._Unlinknode(std._List_val{_Val_types}._Nodeptr)">
      <summary></summary>
      <param name="_Pnode"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_val`1._Adopt_unique(std._List_val{_Val_types},std._List_val{_Val_types}._Nodeptr)">
      <summary></summary>
      <param name="_Other"></param>
      <param name="_Pnode"></param>
    </member>
    <member name="M:std._List_val`1._Adopt_all(std._List_val{_Val_types})">
      <summary></summary>
      <param name="_Other"></param>
    </member>
    <member name="M:std._List_val`1._Adopt_range(std._List_val{_Val_types},std._List_val{_Val_types}._Nodeptr,std._List_val{_Val_types}._Nodeptr)">
      <summary></summary>
      <param name="_Other"></param>
      <param name="_First"></param>
      <param name="_Last"></param>
    </member>
    <member name="M:std._List_val`1._Unchecked_splice(std._List_val{_Val_types}._Nodeptr,std._List_val{_Val_types}._Nodeptr,std._List_val{_Val_types}._Nodeptr)">
      <summary></summary>
      <param name="_Before"></param>
      <param name="_First"></param>
      <param name="_Last"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_val`1._Unchecked_splice(std._List_val{_Val_types}._Nodeptr,std._List_val{_Val_types}._Nodeptr)">
      <summary></summary>
      <param name="_Before"></param>
      <param name="_First"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_val`1._Merge_same``1(std._List_val{_Val_types}._Nodeptr,std._List_val{_Val_types}._Nodeptr,std._List_val{_Val_types}._Nodeptr,_Pr2)">
      <summary></summary>
      <typeparam name="_Pr2"></typeparam>
      <param name="_First"></param>
      <param name="_Mid"></param>
      <param name="_Last"></param>
      <param name="_Pred"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_val`1._Sort``1(std._List_val{_Val_types}._Nodeptr,std._List_val{_Val_types}.size_type,_Pr2)">
      <summary></summary>
      <typeparam name="_Pr2"></typeparam>
      <param name="_First"></param>
      <param name="_Size"></param>
      <param name="_Pred"></param>
      <returns></returns>
    </member>
    <member name="T:std._List_node_emplace_op2`1">
      <summary></summary>
      <typeparam name="_Alnode"></typeparam>
    </member>
    <member name="std._List_node_emplace_op2`1._Alnode_traits">
      <summary></summary>
    </member>
    <member name="std._List_node_emplace_op2`1.pointer">
      <summary></summary>
    </member>
    <member name="M:std._List_node_emplace_op2`1.#ctor``1(_Alnode,_Valtys...)">
      <summary></summary>
      <typeparam name="_Valtys"></typeparam>
      <param name="_Al_"></param>
      <param name="_Vals"></param>
    </member>
    <member name="M:std._List_node_emplace_op2`1.~_List_node_emplace_op2">
      <summary></summary>
    </member>
    <member name="M:std._List_node_emplace_op2`1.#ctor(const std._List_node_emplace_op2{_Alnode})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
    </member>
    <member name="M:std._List_node_emplace_op2`1.operator=(const std._List_node_emplace_op2{_Alnode})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_node_emplace_op2`1._Transfer_before(std._List_node_emplace_op2{_Alnode}.pointer)">
      <summary></summary>
      <param name="_Insert_before"></param>
      <returns></returns>
    </member>
    <member name="T:std._List_node_insert_op`1">
      <summary></summary>
      <typeparam name="_Alnode"></typeparam>
    </member>
    <member name="std._List_node_insert_op`1._Alnode_traits">
      <summary></summary>
    </member>
    <member name="std._List_node_insert_op`1.pointer">
      <summary></summary>
    </member>
    <member name="std._List_node_insert_op`1.size_type">
      <summary></summary>
    </member>
    <member name="std._List_node_insert_op`1.value_type">
      <summary></summary>
    </member>
    <member name="M:std._List_node_insert_op`1.#ctor(_Alnode)">
      <summary></summary>
      <param name="_Al_"></param>
    </member>
    <member name="M:std._List_node_insert_op`1.#ctor(const std._List_node_insert_op{_Alnode})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
    </member>
    <member name="M:std._List_node_insert_op`1.operator=(const std._List_node_insert_op{_Alnode})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_node_insert_op`1._Append_n``1(std._List_node_insert_op{_Alnode}.size_type,const _CArgT...)">
      <summary></summary>
      <typeparam name="_CArgT"></typeparam>
      <param name="_Count"></param>
      <param name="_Carg"></param>
    </member>
    <member name="M:std._List_node_insert_op`1._Append_range_unchecked``2(_InIt,_Sentinel)">
      <summary></summary>
      <typeparam name="_InIt"></typeparam>
      <typeparam name="_Sentinel"></typeparam>
      <param name="_First"></param>
      <param name="_Last"></param>
    </member>
    <member name="M:std._List_node_insert_op`1._Attach_before``1(std._List_val{_Val_types},std._List_node_insert_op{_Alnode}.pointer)">
      <summary></summary>
      <typeparam name="_Val_types"></typeparam>
      <param name="_My_data"></param>
      <param name="_Insert_before"></param>
      <returns></returns>
    </member>
    <member name="M:std._List_node_insert_op`1._Attach_at_end``1(std._List_val{_Val_types})">
      <summary></summary>
      <typeparam name="_Val_types"></typeparam>
      <param name="_My_data"></param>
    </member>
    <member name="M:std._List_node_insert_op`1._Attach_head``1(std._List_val{_Val_types})">
      <summary></summary>
      <typeparam name="_Val_types"></typeparam>
      <param name="_My_data"></param>
    </member>
    <member name="M:std._List_node_insert_op`1.~_List_node_insert_op">
      <summary></summary>
    </member>
    <member name="T:std._Hash`1">
      <summary></summary>
      <typeparam name="_Traits"></typeparam>
    </member>
    <member name="T:std.list`2">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Alloc"></typeparam>
    </member>
    <member name="std.list`2.value_type">
      <summary></summary>
    </member>
    <member name="std.list`2.allocator_type">
      <summary></summary>
    </member>
    <member name="std.list`2.size_type">
      <summary></summary>
    </member>
    <member name="std.list`2.difference_type">
      <summary></summary>
    </member>
    <member name="std.list`2.pointer">
      <summary></summary>
    </member>
    <member name="std.list`2.const_pointer">
      <summary></summary>
    </member>
    <member name="std.list`2.reference">
      <summary></summary>
    </member>
    <member name="std.list`2.const_reference">
      <summary></summary>
    </member>
    <member name="std.list`2.iterator">
      <summary></summary>
    </member>
    <member name="std.list`2.const_iterator">
      <summary></summary>
    </member>
    <member name="std.list`2._Unchecked_iterator">
      <summary></summary>
    </member>
    <member name="std.list`2._Unchecked_const_iterator">
      <summary></summary>
    </member>
    <member name="std.list`2.reverse_iterator">
      <summary></summary>
    </member>
    <member name="std.list`2.const_reverse_iterator">
      <summary></summary>
    </member>
    <member name="M:std.list`2.#ctor">
      <summary></summary>
    </member>
    <member name="M:std.list`2.#ctor(const _Alloc)">
      <summary></summary>
      <param name="_Al"></param>
    </member>
    <member name="M:std.list`2.#ctor(std.list{_Ty,_Alloc}.size_type)">
      <summary></summary>
      <param name="_Count"></param>
    </member>
    <member name="M:std.list`2.#ctor(std.list{_Ty,_Alloc}.size_type,const _Alloc)">
      <summary></summary>
      <param name="_Count"></param>
      <param name="_Al"></param>
    </member>
    <member name="M:std.list`2.#ctor(std.list{_Ty,_Alloc}.size_type,const _Ty)">
      <summary></summary>
      <param name="_Count"></param>
      <param name="_Val"></param>
    </member>
    <member name="M:std.list`2.#ctor(std.list{_Ty,_Alloc}.size_type,const _Ty,const _Alloc)">
      <summary></summary>
      <param name="_Count"></param>
      <param name="_Val"></param>
      <param name="_Al"></param>
    </member>
    <member name="M:std.list`2.#ctor(const std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Right"></param>
    </member>
    <member name="M:std.list`2.#ctor(const std.list{_Ty,_Alloc},const _Alloc)">
      <summary></summary>
      <param name="_Right"></param>
      <param name="_Al"></param>
    </member>
    <member name="M:std.list`2.#ctor``2(_Iter,_Iter)">
      <summary></summary>
      <typeparam name="_Iter"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_First"></param>
      <param name="_Last"></param>
    </member>
    <member name="M:std.list`2.#ctor``2(_Iter,_Iter,const _Alloc)">
      <summary></summary>
      <typeparam name="_Iter"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_First"></param>
      <param name="_Last"></param>
      <param name="_Al"></param>
    </member>
    <member name="M:std.list`2.#ctor(std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Right"></param>
    </member>
    <member name="M:std.list`2.#ctor(std.list{_Ty,_Alloc},const _Alloc)">
      <summary></summary>
      <param name="_Right"></param>
      <param name="_Al"></param>
    </member>
    <member name="M:std.list`2.operator=(std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.push_front(_Ty)">
      <summary></summary>
      <param name="_Val"></param>
    </member>
    <member name="M:std.list`2.push_back(_Ty)">
      <summary></summary>
      <param name="_Val"></param>
    </member>
    <member name="M:std.list`2.insert(std.list{_Ty,_Alloc}.const_iterator,_Ty)">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.emplace_front``1(_Valty...)">
      <summary></summary>
      <typeparam name="_Valty"></typeparam>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.emplace_back``1(_Valty...)">
      <summary></summary>
      <typeparam name="_Valty"></typeparam>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.emplace``1(std.list{_Ty,_Alloc}.const_iterator,_Valty...)">
      <summary></summary>
      <typeparam name="_Valty"></typeparam>
      <param name="_Where"></param>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2._Emplace``1(std.list{_Ty,_Alloc}._Nodeptr,_Valty...)">
      <summary></summary>
      <typeparam name="_Valty"></typeparam>
      <param name="_Where"></param>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.#ctor(std.initializer_list{_Ty})">
      <summary></summary>
      <param name="_Ilist"></param>
    </member>
    <member name="M:std.list`2.#ctor(std.initializer_list{_Ty},const _Alloc)">
      <summary></summary>
      <param name="_Ilist"></param>
      <param name="_Al"></param>
    </member>
    <member name="M:std.list`2.operator=(std.initializer_list{_Ty})">
      <summary></summary>
      <param name="_Ilist"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.assign(std.initializer_list{_Ty})">
      <summary></summary>
      <param name="_Ilist"></param>
    </member>
    <member name="M:std.list`2.insert(std.list{_Ty,_Alloc}.const_iterator,std.initializer_list{_Ty})">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Ilist"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.~list">
      <summary></summary>
    </member>
    <member name="M:std.list`2.operator=(const std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.begin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.begin const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.end">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.end const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2._Unchecked_begin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2._Unchecked_begin const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2._Unchecked_end">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2._Unchecked_end const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2._Make_iter(std.list{_Ty,_Alloc}._Nodeptr) const">
      <summary></summary>
      <param name="_Where"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2._Make_const_iter(std.list{_Ty,_Alloc}._Nodeptr) const">
      <summary></summary>
      <param name="_Where"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.rbegin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.rbegin const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.rend">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.rend const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.cbegin const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.cend const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.crbegin const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.crend const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.resize(std.list{_Ty,_Alloc}.size_type)">
      <summary></summary>
      <param name="_Newsize"></param>
    </member>
    <member name="M:std.list`2.resize(std.list{_Ty,_Alloc}.size_type,const _Ty)">
      <summary></summary>
      <param name="_Newsize"></param>
      <param name="_Val"></param>
    </member>
    <member name="M:std.list`2.size const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.max_size const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.empty const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.get_allocator const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.front">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.front const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.back">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.back const">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.push_front(const _Ty)">
      <summary></summary>
      <param name="_Val"></param>
    </member>
    <member name="M:std.list`2.pop_front">
      <summary></summary>
    </member>
    <member name="M:std.list`2.push_back(const _Ty)">
      <summary></summary>
      <param name="_Val"></param>
    </member>
    <member name="M:std.list`2.pop_back">
      <summary></summary>
    </member>
    <member name="M:std.list`2.assign``2(_Iter,_Iter)">
      <summary></summary>
      <typeparam name="_Iter"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_First"></param>
      <param name="_Last"></param>
    </member>
    <member name="M:std.list`2.assign(std.list{_Ty,_Alloc}.size_type,const _Ty)">
      <summary></summary>
      <param name="_Count"></param>
      <param name="_Val"></param>
    </member>
    <member name="M:std.list`2.insert(std.list{_Ty,_Alloc}.const_iterator,const _Ty)">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.insert(std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc}.size_type,const _Ty)">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Count"></param>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.insert``2(std.list{_Ty,_Alloc}.const_iterator,_Iter,_Iter)">
      <summary></summary>
      <typeparam name="_Iter"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Where"></param>
      <param name="_First"></param>
      <param name="_Last"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.erase(std.list{_Ty,_Alloc}.const_iterator)">
      <summary></summary>
      <param name="_Where"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.erase(std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc}.const_iterator)">
      <summary></summary>
      <param name="_First"></param>
      <param name="_Last"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.clear">
      <summary></summary>
    </member>
    <member name="M:std.list`2.swap(std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Right"></param>
    </member>
    <member name="M:std.list`2.splice(std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Right"></param>
    </member>
    <member name="M:std.list`2.splice(std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Right"></param>
    </member>
    <member name="M:std.list`2.splice(std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc},std.list{_Ty,_Alloc}.const_iterator)">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Right"></param>
      <param name="_First"></param>
    </member>
    <member name="M:std.list`2.splice(std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc},std.list{_Ty,_Alloc}.const_iterator)">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Right"></param>
      <param name="_First"></param>
    </member>
    <member name="M:std.list`2.splice(std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc},std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc}.const_iterator)">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Right"></param>
      <param name="_First"></param>
      <param name="_Last"></param>
    </member>
    <member name="M:std.list`2.splice(std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc},std.list{_Ty,_Alloc}.const_iterator,std.list{_Ty,_Alloc}.const_iterator)">
      <summary></summary>
      <param name="_Where"></param>
      <param name="_Right"></param>
      <param name="_First"></param>
      <param name="_Last"></param>
    </member>
    <member name="T:std.list`2._List_node_remove_op">
      <summary></summary>
    </member>
    <member name="M:std.list`2._List_node_remove_op.#ctor(std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_List_"></param>
    </member>
    <member name="M:std.list`2._List_node_remove_op.#ctor(const std.list{_Ty,_Alloc}._List_node_remove_op)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
    </member>
    <member name="M:std.list`2._List_node_remove_op.operator=(const std.list{_Ty,_Alloc}._List_node_remove_op)">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2._List_node_remove_op._Transfer_back(std.list{_Ty,_Alloc}._Nodeptr)">
      <summary></summary>
      <param name="_Removed"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2._List_node_remove_op.~_List_node_remove_op">
      <summary></summary>
    </member>
    <member name="M:std.list`2.remove(const _Ty)">
      <summary></summary>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.remove_if``1(_Pr1)">
      <summary></summary>
      <typeparam name="_Pr1"></typeparam>
      <param name="_Pred"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.unique">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:std.list`2.unique``1(_Pr2)">
      <summary></summary>
      <typeparam name="_Pr2"></typeparam>
      <param name="_Pred"></param>
      <returns></returns>
    </member>
    <member name="M:std.list`2.merge(std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Right"></param>
    </member>
    <member name="M:std.list`2.merge(std.list{_Ty,_Alloc})">
      <summary></summary>
      <param name="_Right"></param>
    </member>
    <member name="M:std.list`2.merge``1(std.list{_Ty,_Alloc},_Pr2)">
      <summary></summary>
      <typeparam name="_Pr2"></typeparam>
      <param name="_Right"></param>
      <param name="_Pred"></param>
    </member>
    <member name="M:std.list`2.merge``1(std.list{_Ty,_Alloc},_Pr2)">
      <summary></summary>
      <typeparam name="_Pr2"></typeparam>
      <param name="_Right"></param>
      <param name="_Pred"></param>
    </member>
    <member name="M:std.list`2.sort">
      <summary></summary>
    </member>
    <member name="M:std.list`2.sort``1(_Pr2)">
      <summary></summary>
      <typeparam name="_Pr2"></typeparam>
      <param name="_Pred"></param>
    </member>
    <member name="M:std.list`2.reverse">
      <summary></summary>
    </member>
    <member name="M:std.swap``2(std.list{_Ty,_Alloc},std.list{_Ty,_Alloc})">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Alloc"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
    </member>
    <member name="M:std.operator==``2(const std.list{_Ty,_Alloc},const std.list{_Ty,_Alloc})">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Alloc"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator!=``2(const std.list{_Ty,_Alloc},const std.list{_Ty,_Alloc})">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Alloc"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator&lt;``2(const std.list{_Ty,_Alloc},const std.list{_Ty,_Alloc})">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Alloc"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator&gt;``2(const std.list{_Ty,_Alloc},const std.list{_Ty,_Alloc})">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Alloc"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator&lt;=``2(const std.list{_Ty,_Alloc},const std.list{_Ty,_Alloc})">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Alloc"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator&gt;=``2(const std.list{_Ty,_Alloc},const std.list{_Ty,_Alloc})">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Alloc"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
  </members>
</doc>
