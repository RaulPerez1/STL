<?xml version="1.0"?>
<doc>
  <members>
    <member name="M:std._Min_value``1(const _Ty,const _Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std._Max_value``1(const _Ty,const _Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.iter_swap``2(_FwdIt1,_FwdIt2)">
      <summary></summary>
      <typeparam name="_FwdIt1"></typeparam>
      <typeparam name="_FwdIt2"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
    </member>
    <member name="M:std.swap``3(_Ty ()[_Size],_Ty ()[_Size])">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Size"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
    </member>
    <member name="M:std.swap``2(_Ty,_Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
    </member>
    <member name="M:std._Swap_adl``1(_Ty,_Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
    </member>
    <member name="T:std.piecewise_construct_t">
      <summary></summary>
    </member>
    <member name="M:std.piecewise_construct_t.#ctor">
      <summary></summary>
    </member>
    <member name="T:std.tuple`1">
      <summary></summary>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
    </member>
    <member name="T:std.pair`2">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
    </member>
    <member name="std.pair`2.first_type">
      <summary></summary>
    </member>
    <member name="std.pair`2.second_type">
      <summary></summary>
    </member>
    <member name="M:std.pair`2.#ctor``3">
      <summary></summary>
      <typeparam name="_Uty1"></typeparam>
      <typeparam name="_Uty2"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
    </member>
    <member name="M:std.pair`2.#ctor``3(const _Ty1,const _Ty2)">
      <summary></summary>
      <typeparam name="_Uty1"></typeparam>
      <typeparam name="_Uty2"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Val1"></param>
      <param name="_Val2"></param>
    </member>
    <member name="M:std.pair`2.#ctor``3(_Other1,_Other2)">
      <summary></summary>
      <typeparam name="_Other1"></typeparam>
      <typeparam name="_Other2"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Val1"></param>
      <param name="_Val2"></param>
    </member>
    <member name="M:std.pair`2.#ctor(const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
    </member>
    <member name="M:std.pair`2.#ctor(std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
    </member>
    <member name="M:std.pair`2.#ctor``3(const std.pair{_Other1,_Other2})">
      <summary></summary>
      <typeparam name="_Other1"></typeparam>
      <typeparam name="_Other2"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Right"></param>
    </member>
    <member name="M:std.pair`2.#ctor``3(std.pair{_Other1,_Other2})">
      <summary></summary>
      <typeparam name="_Other1"></typeparam>
      <typeparam name="_Other2"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Right"></param>
    </member>
    <member name="M:std.pair`2.#ctor``4(_Tuple1,_Tuple2,std.index_sequence{},std.index_sequence{})">
      <summary></summary>
      <typeparam name="_Tuple1"></typeparam>
      <typeparam name="_Tuple2"></typeparam>
      <typeparam name="_Indexes1"></typeparam>
      <typeparam name="_Indexes2"></typeparam>
      <param name="_Val1"></param>
      <param name="_Val2"></param>
      <param name="&lt;unnamed&gt;"></param>
      <param name="&lt;unnamed&gt;"></param>
    </member>
    <member name="M:std.pair`2.#ctor``2(std.piecewise_construct_t,std.tuple{_Types1},std.tuple{_Types2})">
      <summary></summary>
      <typeparam name="_Types1"></typeparam>
      <typeparam name="_Types2"></typeparam>
      <param name="&lt;unnamed&gt;"></param>
      <param name="_Val1"></param>
      <param name="_Val2"></param>
    </member>
    <member name="M:std.pair`2.operator=(const volatile std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std.pair`2.operator=``2(std._Identity_t{const _Myself})">
      <summary></summary>
      <typeparam name="_Myself"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.pair`2.operator=``2(std._Identity_t{_Myself})">
      <summary></summary>
      <typeparam name="_Myself"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.pair`2.operator=``3(const std.pair{_Other1,_Other2})">
      <summary></summary>
      <typeparam name="_Other1"></typeparam>
      <typeparam name="_Other2"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.pair`2.operator=``3(std.pair{_Other1,_Other2})">
      <summary></summary>
      <typeparam name="_Other1"></typeparam>
      <typeparam name="_Other2"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.pair`2.swap(std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <param name="_Right"></param>
    </member>
    <member name="M:std.swap``3(std.pair{_Ty1,_Ty2},std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
    </member>
    <member name="M:std.operator==``2(const std.pair{_Ty1,_Ty2},const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator!=``2(const std.pair{_Ty1,_Ty2},const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator&lt;``2(const std.pair{_Ty1,_Ty2},const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator&gt;``2(const std.pair{_Ty1,_Ty2},const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator&lt;=``2(const std.pair{_Ty1,_Ty2},const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.operator&gt;=``2(const std.pair{_Ty1,_Ty2},const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="T:std._Unrefwrap_helper`1">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
    </member>
    <member name="std._Unrefwrap_helper`1.type">
      <summary></summary>
    </member>
    <member name="T:std._Unrefwrap_helper`1">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
    </member>
    <member name="std._Unrefwrap_helper`1.type">
      <summary></summary>
    </member>
    <member name="std._Unrefwrap_t`1">
      <summary></summary>
    </member>
    <member name="M:std.make_pair``2(_Ty1,_Ty2)">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Val1"></param>
      <param name="_Val2"></param>
      <returns></returns>
    </member>
    <member name="M:std.rel_ops.operator!=``1(const _Ty,const _Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.rel_ops.operator&gt;``1(const _Ty,const _Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.rel_ops.operator&lt;=``1(const _Ty,const _Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="M:std.rel_ops.operator&gt;=``1(const _Ty,const _Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="_Left"></param>
      <param name="_Right"></param>
      <returns></returns>
    </member>
    <member name="T:std.tuple_size`1">
      <summary></summary>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="T:std._Tuple_size_sfinae`2">
      <summary></summary>
      <typeparam name="_Tuple"></typeparam>
      <typeparam name="&lt;unnamed&gt;"></typeparam>
    </member>
    <member name="T:std._Tuple_size_sfinae`2">
      <summary></summary>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="T:std.tuple_size`1">
      <summary></summary>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="T:std.tuple_size`1">
      <summary></summary>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="T:std.tuple_size`1">
      <summary></summary>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_Index"></typeparam>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_Index"></typeparam>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="std.tuple_element`2._Mybase">
      <summary></summary>
    </member>
    <member name="std.tuple_element`2.type">
      <summary></summary>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_Index"></typeparam>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="std.tuple_element`2._Mybase">
      <summary></summary>
    </member>
    <member name="std.tuple_element`2.type">
      <summary></summary>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_Index"></typeparam>
      <typeparam name="_Tuple"></typeparam>
    </member>
    <member name="std.tuple_element`2._Mybase">
      <summary></summary>
    </member>
    <member name="std.tuple_element`2.type">
      <summary></summary>
    </member>
    <member name="std.tuple_element_t`2">
      <summary></summary>
    </member>
    <member name="T:std.array`2">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Size"></typeparam>
    </member>
    <member name="T:std.tuple_size`1">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Size"></typeparam>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_Idx"></typeparam>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Size"></typeparam>
    </member>
    <member name="std.tuple_element`2.type">
      <summary></summary>
    </member>
    <member name="T:std.tuple_size`1">
      <summary></summary>
      <typeparam name="_Types"></typeparam>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_Index"></typeparam>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_This"></typeparam>
      <typeparam name="_Rest"></typeparam>
    </member>
    <member name="std.tuple_element`2.type">
      <summary></summary>
    </member>
    <member name="std.tuple_element`2._Ttype">
      <summary></summary>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_Index"></typeparam>
      <typeparam name="_This"></typeparam>
      <typeparam name="_Rest"></typeparam>
    </member>
    <member name="T:std.tuple_size`1">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
    </member>
    <member name="T:std.tuple_element`2">
      <summary></summary>
      <typeparam name="_Idx"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
    </member>
    <member name="std.tuple_element`2.type">
      <summary></summary>
    </member>
    <member name="M:std._Pair_get``2(_Pair,std.integral_constant{size_t,})">
      <summary></summary>
      <typeparam name="_Ret"></typeparam>
      <typeparam name="_Pair"></typeparam>
      <param name="_Pr"></param>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std._Pair_get``2(_Pair,std.integral_constant{size_t,})">
      <summary></summary>
      <typeparam name="_Ret"></typeparam>
      <typeparam name="_Pair"></typeparam>
      <param name="_Pr"></param>
      <param name="&lt;unnamed&gt;"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``3(std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Idx"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``2(std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``2(std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty2"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``3(const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Idx"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``2(const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``2(const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty2"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``3(std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Idx"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``2(std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``2(std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty2"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``3(const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Idx"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``2(const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty1"></typeparam>
      <typeparam name="_Ty2"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.get``2(const std.pair{_Ty1,_Ty2})">
      <summary></summary>
      <typeparam name="_Ty2"></typeparam>
      <typeparam name="_Ty1"></typeparam>
      <param name="_Pr"></param>
      <returns></returns>
    </member>
    <member name="M:std.exchange``2(_Ty,_Other)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <typeparam name="_Other"></typeparam>
      <param name="_Val"></param>
      <param name="_New_val"></param>
      <returns></returns>
    </member>
    <member name="M:std.as_const``1(_Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="_Val"></param>
      <returns></returns>
    </member>
    <member name="M:std.as_const``1(const _Ty)">
      <summary></summary>
      <typeparam name="_Ty"></typeparam>
      <param name="&lt;unnamed&gt;"></param>
    </member>
  </members>
</doc>
